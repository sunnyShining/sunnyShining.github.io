<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunny</title>
  
  <subtitle>Happy Every Day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunnyShining.github.io/"/>
  <updated>2019-06-29T09:04:59.607Z</updated>
  <id>https://sunnyShining.github.io/</id>
  
  <author>
    <name>sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>reflow（回流）和repaint（重绘）</title>
    <link href="https://sunnyShining.github.io/2019/reflowAndRepaint/"/>
    <id>https://sunnyShining.github.io/2019/reflowAndRepaint/</id>
    <published>2019-02-12T06:48:48.000Z</published>
    <updated>2019-06-29T09:04:59.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器解析"><a href="#浏览器解析" class="headerlink" title="浏览器解析"></a>浏览器解析</h2><p>浏览器解析大概的工作流程大致可归纳为四个步骤：</p><ol><li>解析HTML以构建DOM树：渲染引擎开始解析HTML文档，转换树中的html标签或js生成的标签到DOM节点，它被称为 – 内容树。</li><li>构建渲染树：解析CSS（包括外部CSS文件和样式元素以及js生成的样式）成样式结构体，根据CSS选择器计算出节点的样式，创建另一个树 —- 渲染树（render tree）。<br>注：在解析的过程中会去掉浏览器不能识别的样式，比如IE会去掉-moz开头的样式，而firefox会去掉_开头的样式。</li><li>布局(reflow)渲染树: 从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标。</li><li>绘制(repaint)渲染树: 遍历渲染树，每个节点将使用UI后端层来绘制。</li></ol><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>reflow：对于DOM结构中的各个元素都有自己的盒子（模型），这些都需要浏览器根据各种样式（浏览器的、开发人员定义的等）来计算并根据计算结果将元素放到它该出现的位置<br>repaint：当各种盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来后，浏览器于是便把这些元素都按照各自的特性绘制了一遍，于是页面的内容出现了</p><p>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。<br>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为repaint重绘。<br>注意：回流必将引起重绘，而重绘不一定会引起回流。</p><h2 id="引起Repain和Reflow的一些操作"><a href="#引起Repain和Reflow的一些操作" class="headerlink" title="引起Repain和Reflow的一些操作"></a>引起Repain和Reflow的一些操作</h2><p>Reflow 的成本比 Repaint 的成本高得多的多。DOM Tree 里的每个结点都会有 reflow 方法，一个结点的 reflow 很有可能导致子结点，甚至父点以及同级结点的 reflow。<br>当你增加、删除、修改 DOM 结点时，会导致 Reflow 或 Repaint。<br>当你移动 DOM 的位置，或是搞个动画的时候。<br>当你修改 /删除CSS 样式的时候。<br>当你 Resize 窗口的时候（移动端没有这个问题），或是滚动的时候。<br>当你修改网页的默认字体时。<br>当你设置 style 属性的值 （Setting a property of the style attribute）。<br>注：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发现位置变化。</p><h2 id="如何减少Repain和Reflow"><a href="#如何减少Repain和Reflow" class="headerlink" title="如何减少Repain和Reflow"></a>如何减少Repain和Reflow</h2><p>Reflow是不可避免的，只能将Reflow对性能的影响减到最小,给出下面几条建议：</p><ol><li>不要一条一条地修改 DOM 的样式。与其这样，还不如预先定义好 css 的 class，然后修改 DOM 的 className，即将多次改变样式属性的操作合并成一次操作：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">var</span> left = <span class="number">10</span>,</span><br><span class="line">top = <span class="number">10</span>;</span><br><span class="line">el.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">el.style.top  = top  + <span class="string">"px"</span>;</span><br><span class="line">el.style.background = <span class="string">'#eee'</span>;</span><br><span class="line"><span class="comment">// 比较好的写法</span></span><br><span class="line">el.className += <span class="string">" theclassname"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>让要操作的元素进行”离线处理”，处理完后一起更新</li></ol><ul><li>使用DocumentFragment进行缓存操作,引发一次回流和重绘；</li><li>使用display:none技术，只引发两次回流和重绘;</li></ul><p>原理：由于display属性为none的元素不在渲染树中，对隐藏的元素操 作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。</p><ul><li>使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘；</li></ul><ol start="3"><li>不要把 DOM 节点的属性值放在一个循环里当成循环里的变量。不然这会导致大量地读写这个结点的属性。</li><li>尽可能的修改层级比较低的 DOM节点。当然，改变层级比较底的 DOM节点有可能会造成大面积的 reflow，但是也可能影响范围很小。<br>因为改变 DOM 树中的一级会导致所有层级的改变，上至根部，下至被改变节点的子节点。这导致大量时间耗费在执行 reflow 上面</li><li>将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素为动画的 HTML 元素，例如动画，那么修改他们的 CSS 是会大大减小 reflow 。因为,它们不影响其他元素的布局，所它他们只会导致重新绘制，而不是一个完整回流。这样消耗会更低。</li><li>。不要用tables布局的一个原因就是tables中某个元素一旦触发reflow就会导致table里所有的其它元素reflow。在适合用table的场合，可以设置table-layout为auto或fixed，这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。</li><li>避免使用CSS的JavaScript表达式，如果css里有expression，每次都会重新计算一遍。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器解析&quot;&gt;&lt;a href=&quot;#浏览器解析&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析&quot;&gt;&lt;/a&gt;浏览器解析&lt;/h2&gt;&lt;p&gt;浏览器解析大概的工作流程大致可归纳为四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解析HTML以构建DOM树：渲染引擎开始解析HTML文档，转换树中的html标签或js生成的标签到DOM节点，它被称为 – 内容树。&lt;/li&gt;
&lt;li&gt;构建渲染树：解析CSS（包括外部CSS文件和样式元素以及js生成的样式）成样式结构体，根据CSS选择器计算出节点的样式，创建另一个树 —- 渲染树（render tree）。&lt;br&gt;注：在解析的过程中会去掉浏览器不能识别的样式，比如IE会去掉-moz开头的样式，而firefox会去掉_开头的样式。&lt;/li&gt;
&lt;li&gt;布局(reflow)渲染树: 从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标。&lt;/li&gt;
&lt;li&gt;绘制(repaint)渲染树: 遍历渲染树，每个节点将使用UI后端层来绘制。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>http与Https区别</title>
    <link href="https://sunnyShining.github.io/2019/httpWithHttps/"/>
    <id>https://sunnyShining.github.io/2019/httpWithHttps/</id>
    <published>2019-01-28T03:24:50.000Z</published>
    <updated>2019-06-29T09:04:59.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>超文本传输协议(HTTP协议)被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。<br>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p><a id="more"></a><h2 id="HTTPS和HTTP的主要区别"><a href="#HTTPS和HTTP的主要区别" class="headerlink" title="HTTPS和HTTP的主要区别"></a>HTTPS和HTTP的主要区别</h2><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用，推荐KeyManager，可免费获得个人ssl证书。<br>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h2 id="客户端在使用HTTPS方式与Web服务器通信时的几个步骤"><a href="#客户端在使用HTTPS方式与Web服务器通信时的几个步骤" class="headerlink" title="客户端在使用HTTPS方式与Web服务器通信时的几个步骤"></a>客户端在使用HTTPS方式与Web服务器通信时的几个步骤</h2><p>1、客户端发出安全请求访问<a href="https://xxx.xxx.com" target="_blank" rel="noopener">https://xxx.xxx.com</a><br>2、服务端接收到客户端请求，会把<a href="https://xxx.xxx.com" target="_blank" rel="noopener">https://xxx.xxx.com</a> 网站的证书信息(公钥)，传送一份给客户端。<br>3、客户端用预设的ca证书列表验证证书，如果证书有问题则提示风险<br>4、客户端生成随机的对称密钥，使用公钥进行加密，发给服务器<br>5、服务端利用私钥进行解密，得到对称密钥<br>6、双方都知道密钥，利用密钥进行通信</p><h2 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a>HTTPS的缺点</h2><p>（1）HTTPS协议握手阶段比较费时，会使页面的加载时间延长近50%，增加10%到20%的耗电；<br>（2）HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；<br>（3）SSL证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。<br>（4）SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗。<br>（5）HTTPS协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p><p>内容参考：<a href="https://blog.csdn.net/qq_35642036/article/details/82788421" target="_blank" rel="noopener">https://blog.csdn.net/qq_35642036/article/details/82788421</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;超文本传输协议(HTTP协议)被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。&lt;br&gt;为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式和&quot;发布-订阅&quot;者模式</title>
    <link href="https://sunnyShining.github.io/2019/desginPattern/"/>
    <id>https://sunnyShining.github.io/2019/desginPattern/</id>
    <published>2019-01-27T03:25:00.000Z</published>
    <updated>2019-06-29T09:04:59.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在网上查阅资料的时候发现有两种常见的设计模式，观察者模式和“发布-订阅”者模式，有人认为两种模式认为两种模式是相同的，但通过查阅各个博客，发现其中还是有一些不同。</p><a id="more"></a><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式在软件设计中是一个对象(Subject)，维护一个依赖列表(ObserversList)，当任何状态发生改变自动通知(notify)它们。</p><p>例如：餐馆就是一个主体，是观察的对象，用餐人员是观察者，餐馆座位是观察者的队列，叫号（状态发生改变）时就会通知(notify)用餐人员(观察者)，观察者去看手里的号码，就是执行相应的函数(update)；</p><p>具体实现代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObserverList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ObserverList = [];</span><br><span class="line">&#125;</span><br><span class="line">ObserverList.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ObserverList.push(obj);</span><br><span class="line">&#125;;</span><br><span class="line">ObserverList.prototype.count = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="keyword">this</span>.ObserverList.length;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">ObserverList.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span> &amp;&amp; index &lt; <span class="keyword">this</span>.ObserverList.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.ObserverList[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ObserverList.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">obj, startIndex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = startIndex;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>.ObserverList.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj === <span class="keyword">this</span>.ObserverList[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ObserverList.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span> &amp;&amp; index &lt; <span class="keyword">this</span>.ObserverList.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> removeItem = <span class="keyword">this</span>.ObserverList.splice(index, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> removeItem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.Observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">&#125;</span><br><span class="line">Subject.prototype.addObserver = <span class="function"><span class="keyword">function</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.Observers.add(observer);</span><br><span class="line">&#125;;</span><br><span class="line">Subject.prototype.removeObserver = <span class="function"><span class="keyword">function</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.Observers.remove(<span class="keyword">this</span>.Observers.indexOf(observer, <span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通知</span></span><br><span class="line">Subject.prototype.notify = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> observerscount = <span class="keyword">this</span>.Observers.count();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; observerscount; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> observer = <span class="keyword">this</span>.Observers.get(i);</span><br><span class="line">        observer &amp;&amp; observer.update &amp;&amp; observer.update(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Observer();</span><br><span class="line">xiaohong.update = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ctx + <span class="string">'吗？'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Observer();</span><br><span class="line">xiaoming.update = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ctx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sub = <span class="keyword">new</span> Subject();</span><br><span class="line"><span class="comment">// 加上小明这个观察者</span></span><br><span class="line">sub.addObserver(xiaohong);</span><br><span class="line">sub.addObserver(xiaoming);</span><br><span class="line">sub.notify(<span class="string">'着火了'</span>);</span><br></pre></td></tr></table></figure><h2 id="“发布-订阅”者模式"><a href="#“发布-订阅”者模式" class="headerlink" title="“发布-订阅”者模式"></a>“发布-订阅”者模式</h2><p>在”发布-订阅”者模式，消息的发送方，叫做发布者（publishers），消息不会直接发送给特定的接收者(Subscriber)。需要一个第三方组件，叫做信息中介，它将订阅者和发布者串联起来，它过滤和分配所有输入的消息。换句话说，发布-订阅模式用来处理不同系统组件的信息交流，即使这些组件不知道对方的存在。</p><p>例如：我们在微信平台订阅了公众号，公众号管理员(publishers)不需要直接发消息给订阅人员(Subscriber)，而是通过微信这个平台，当它有新的文章发表后，就会推送给我们所有订阅的人。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> global = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> Event;</span><br><span class="line">    <span class="keyword">var</span> _default = <span class="string">'default'</span>;</span><br><span class="line">    Event = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _listen,</span><br><span class="line">            _trigger,</span><br><span class="line">            _remove,</span><br><span class="line">            _slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">            _shift = <span class="built_in">Array</span>.prototype.shift,</span><br><span class="line">            _unshift = <span class="built_in">Array</span>.prototype.unshift,</span><br><span class="line">            namespaceCache = &#123;&#125;,</span><br><span class="line">            _create,</span><br><span class="line">            find,</span><br><span class="line">            each = <span class="function"><span class="keyword">function</span>(<span class="params">ary, fn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> n = ary[i];</span><br><span class="line">                    ret = fn.call(n, i, n);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;;</span><br><span class="line">        _listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, cache</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!cache[key]) &#123;</span><br><span class="line">                cache[key] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            cache[key].push(fn);</span><br><span class="line">        &#125;;</span><br><span class="line">        _remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, cache, fn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = cache[key].length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cache[key][i] === fn) &#123;</span><br><span class="line">                            cache[key].splice(i, <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache[key] = [];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        _trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> cache = _shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">                key = _shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">                args = <span class="built_in">arguments</span>,</span><br><span class="line">                _self = <span class="keyword">this</span>,</span><br><span class="line">                ret,</span><br><span class="line">                stack = cache[key];</span><br><span class="line">            <span class="keyword">if</span> (!stack || !stack.length) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> each(stack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.apply(_self, args);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        _create = <span class="function"><span class="keyword">function</span>(<span class="params">namespace</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> namespace = namespace || _default;</span><br><span class="line">            <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">            <span class="keyword">var</span> offlineStack = []; <span class="comment">//离线事件</span></span><br><span class="line">            <span class="keyword">var</span> ret = &#123;</span><br><span class="line">                listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                    _listen(key, fn, cache);</span><br><span class="line">                    <span class="keyword">if</span> (offlineStack === <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (last === <span class="string">'last'</span>) &#123;</span><br><span class="line">                        offlineStack.length &amp;&amp; offlineStack.pop()();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        each(offlineStack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">this</span>();</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    offlineStack = <span class="literal">null</span>;</span><br><span class="line">                &#125;,</span><br><span class="line">                one: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                    _remove(key, cache);</span><br><span class="line">                    <span class="keyword">this</span>.listen(key, fn, last);</span><br><span class="line">                &#125;,</span><br><span class="line">                remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">                    _remove(key, cache, fn);</span><br><span class="line">                &#125;,</span><br><span class="line">                trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> fn,</span><br><span class="line">                        args,</span><br><span class="line">                        _self = <span class="keyword">this</span>;</span><br><span class="line">                    _unshift.call(<span class="built_in">arguments</span>, cache);</span><br><span class="line">                    args = <span class="built_in">arguments</span>;</span><br><span class="line">                    fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> _trigger.apply(_self, args);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">if</span> (offlineStack) &#123;</span><br><span class="line">                        <span class="keyword">return</span> offlineStack.push(fn);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> fn();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> namespace ? (namespaceCache[namespace] ? namespaceCache[namespace] : namespaceCache[namespace] = ret) : ret;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            create: _create,</span><br><span class="line">            one: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.one(key, fn, last);</span><br><span class="line">            &#125;,</span><br><span class="line">            remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.remove(key, fn);</span><br><span class="line">            &#125;,</span><br><span class="line">            listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.listen(key, fn, last);</span><br><span class="line">            &#125;,</span><br><span class="line">            trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                event.trigger.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;();</span><br><span class="line">    <span class="keyword">return</span> Event;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">/********* 先发布后订阅 *********/</span></span><br><span class="line">Event.trigger(<span class="string">'click'</span>, <span class="number">1</span>);</span><br><span class="line">Event.listen(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/********* 使用命名空间 *********/</span></span><br><span class="line">Event.create(<span class="string">'namespace1'</span>).listen(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br><span class="line">&#125;)</span><br><span class="line">Event.create(<span class="string">'namespace1'</span>).trigger(<span class="string">'click'</span>, <span class="number">1</span>);</span><br><span class="line">Event.create(<span class="string">'namespace3'</span>).listen(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//2</span></span><br><span class="line">&#125;)</span><br><span class="line">Event.create(<span class="string">'namespace3'</span>).trigger(<span class="string">'click'</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在网上查阅资料的时候发现有两种常见的设计模式，观察者模式和“发布-订阅”者模式，有人认为两种模式认为两种模式是相同的，但通过查阅各个博客，发现其中还是有一些不同。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>布局神器 --- BFC</title>
    <link href="https://sunnyShining.github.io/2019/bfc/"/>
    <id>https://sunnyShining.github.io/2019/bfc/</id>
    <published>2019-01-25T01:41:14.000Z</published>
    <updated>2019-06-29T09:04:59.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>BFC(Block formatting context)直译为”块级格式化上下文”。BFC元素就是一个独立的盒子，只有Blcok-level box(块级盒) 可以创建BFC，它规定了内部的Block-level Box如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。</p><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><strong>1.内部的box会在垂直方向，从顶部开始一个接着一个地放置;</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.box &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.c_red &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.c_yellow &#123;</span></span><br><span class="line"><span class="undefined">    background-color: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.c_blue &#123;</span></span><br><span class="line"><span class="undefined">    background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_yellow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc1.png" alt="bfc1"></p><p><strong>2.box 垂直方向的距离由margin(外边距)决定。属于同一个BFC的两个相邻box的margin会发生叠加</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .box &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background-color: green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .c_red &#123;</span></span><br><span class="line"><span class="undefined">        background-color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .c_yellow &#123;</span></span><br><span class="line"><span class="undefined">        background-color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .c_blue &#123;</span></span><br><span class="line"><span class="undefined">        background-color: blue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .mgt_50 &#123;</span></span><br><span class="line"><span class="undefined">        margin-top: 50px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .mgb_50&#123;</span></span><br><span class="line"><span class="undefined">        margin-bottom: 50px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_red mgb_50"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_yellow mgt_50"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc2.png" alt="bfc2"></p><p><strong>3.BFC的区域不会与float box叠加</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .box &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background-color: green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .c_red &#123;</span></span><br><span class="line"><span class="undefined">        background-color: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .fl&#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box fl"</span>&gt;</span>元素A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_red"</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px"</span>&gt;</span>元素B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>正常情况下，后面元素B会与前面的元素A重叠（因为float导致A元素脱离文档流不再占据原来的位置，后面元素会占据前面的位置，如图）</p></blockquote><p><img src="/2019/bfc/bfc3.png" alt="bfc3"></p><blockquote><p>这个时候，我们任意选取上面一种原因加给元素B，比如加上overflow:hidden，于是元素B产生了BFC效果，导致元素B区域不会与float box（元素A）叠加，如图;</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.box &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.c_red &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.fl&#123;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box fl"</span>&gt;</span>元素A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_red"</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px; overflow:hidden"</span>&gt;</span>元素B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc4.png" alt="bfc4"></p><p><strong>4.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</strong></p><p><strong>5.计算BFC高度时，浮动元素也参与计算</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 10px;background-color: red;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;width: 100px; height: 100px; background-color: green;"</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当子元素浮动，父元素便产生了高度坍塌问题，因为浮动元素不参与计算</p></blockquote><p><img src="/2019/bfc/bfc5.png" alt="bfc5"></p><blockquote><p>而当我们给元素B，比如加上overflow:auto，产生BFC效果，浮动元素便参与计算，便不会产生高度坍塌问题</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;background-color: red; overflow: auto;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;width: 100px; height: 100px; background-color: green;"</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc6.png" alt="bfc6"></p><p><strong>6.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</strong></p><h2 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发BFC</h2><p><strong>1. 根元素或包含根元素的元素;</strong><br><strong>2. 设置除 float:none 以外的属性值（如：left | right）就会触发BFC;</strong><br><strong>3. 设置除 overflow: visible 以外的属性值（如： hidden | auto | scroll）就会触发BFC;</strong><br><strong>4. 设置 display属性值为: inline-block | flex | inline-flex | table-cell | table-caption 就会触发BFＣ</strong><br><strong>5. 设置 position 属性值为：absolute | fixed 就会触发BFC</strong><br><strong>6. 使用 fieldset 元素（可以给表单元素设置环绕边框的html元素）也会触发BFC</strong></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>1. 用于清除浮动，计算高度</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 200px;background-color: red; overflow: auto;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;width: 100px; height: 100px; background-color: green;"</span>&gt;</span>son<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc6.png" alt="bfc6"></p><p><strong>2. 用于自适应两栏布局</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.box &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.c_red &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.fl&#123;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box fl"</span>&gt;</span>元素A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_red"</span> <span class="attr">style</span>=<span class="string">"width: 200px; height: 200px; overflow:hidden"</span>&gt;</span>元素B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc4.png" alt="bfc4"></p><p><strong>3. 解决margin叠加问题</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.box &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.c_red &#123;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.c_yellow &#123;</span></span><br><span class="line"><span class="undefined">    background-color: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.c_blue &#123;</span></span><br><span class="line"><span class="undefined">    background-color: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.mgt_50 &#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">.mgb_50 &#123;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_red mgb_50"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"overflow: auto;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_yellow mgt_50"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c_blue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/bfc/bfc7.png" alt="bfc7"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;BFC(Block formatting context)直译为”块级格式化上下文”。BFC元素就是一个独立的盒子，只有Blcok-level box(块级盒) 可以创建BFC，它规定了内部的Block-level Box如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="css" scheme="https://sunnyShining.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>垂直居中的几种实现方式</title>
    <link href="https://sunnyShining.github.io/2019/verticalCenter/"/>
    <id>https://sunnyShining.github.io/2019/verticalCenter/</id>
    <published>2019-01-24T06:02:37.000Z</published>
    <updated>2019-06-29T09:04:59.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>垂直居中是布局中十分常见的效果之一，如弹框组件和loading和toast等组件，实现的方式也是多种多样，以下简单介绍几种。</p><a id="more"></a><h2 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #parent1 &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background: green;</span></span><br><span class="line"><span class="undefined">        display: table;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #child1 &#123;</span></span><br><span class="line"><span class="undefined">        display: table-cell;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child1"</span>&gt;</span>此处应当有掌声<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果<br><img src="/2019/verticalCenter/vertical_center1.png" alt="vertical_center1"></p><p>一个弹框的简单实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #parent1 &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        z-index: 9999;</span></span><br><span class="line"><span class="undefined">        background-color: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="undefined">        display: table;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #child1 &#123;</span></span><br><span class="line"><span class="undefined">        display: table-cell;</span></span><br><span class="line"><span class="undefined">        vertical-align: middle;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    .dialog-container &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: #fff;</span></span><br><span class="line"><span class="undefined">        border-radius: 5px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dialog-container"</span>&gt;</span></span><br><span class="line">                此处应当有掌声</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果<br><img src="/2019/verticalCenter/vertical_center2.png" alt="vertical_center2"></p><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #parent2 &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: red;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #child2 &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background-color: green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child2"</span>&gt;</span></span><br><span class="line">            此处应当有掌声</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果<br><img src="/2019/verticalCenter/vertical_center3.png" alt="vertical_center3"></p><p>一个弹框的简单实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #parent2 &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        background-color: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        z-index: 9999;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #child2 &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: #fff;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        border-radius: 5px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child2"</span>&gt;</span></span><br><span class="line">            此处应当有掌声</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/verticalCenter/vertical_center4.png" alt="vertical_center4"></p><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#parent3 &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">#child3 &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child3"</span>&gt;</span></span><br><span class="line">        此处应当有掌声</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/verticalCenter/vertical_center5.png" alt="vertical_center5"></p><p>一个弹框的简单实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    * &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #parent3 &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        background-color: rgba(0, 0, 0, 0.5);</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        z-index: 999;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #child3 &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 50%;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        transform: translate(-50%, -50%); // 可以用margin: -100px 0 0 -100px;大小为child的一半</span></span><br><span class="line"><span class="undefined">        background-color: #fff;</span></span><br><span class="line"><span class="undefined">        border-radius: 5px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child3"</span>&gt;</span></span><br><span class="line">            此处应当有掌声</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/verticalCenter/vertical_center6.png" alt="vertical_center6"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;垂直居中是布局中十分常见的效果之一，如弹框组件和loading和toast等组件，实现的方式也是多种多样，以下简单介绍几种。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>es6 let理解闭包</title>
    <link href="https://sunnyShining.github.io/2019/bibao/"/>
    <id>https://sunnyShining.github.io/2019/bibao/</id>
    <published>2019-01-23T03:20:10.000Z</published>
    <updated>2019-06-29T09:04:59.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// var</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">6</span>]();</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// let</span></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">6</span>]();</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure><a id="more"></a><p>结果</p><p>var执行结果</p><p><img src="/2019/bibao/bibao_var.png" alt="var"></p><p>let执行结果</p><p><img src="/2019/bibao/bibao_let.png" alt="let"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>两个例子中，唯一的区别是前者for循环中使用var来定义i，得到的结果是10.而后者使用的是let来定义i，最终得到的结果是6.这是为什么呢？</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>let和var区别：</p><p>相同点: 作用都是定义变量关键字</p><p>区别点：</p><p> 作用域只限制于当前代码块{}   —–   var的作用域则是函数体function(){}<br> 使用let声明变量的作用域不会提示  —–   而var会自动提升<br> 在相同的用作用域下不能有相同的变量，否则报错  ——   而var中则可以出现相同变量名，且不会报错。<br> for循环提现父子作用域。 —— 比如以前ES5、在循环中找不到你的 i 值，则会上面找，这样往往是不合逻辑的， 解决办法可以使用闭包完美解决，而ES6出现了let则不用闭包，他自带有作用域的限制，这样就能很好的满足我们的逻辑了</p><p>var循环执行相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">9</span>;</span><br><span class="line">a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">6</span>](); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>let执行顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    arr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    arr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">9</span>;</span><br><span class="line">    arr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">arr[<span class="number">6</span>](); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>结果一目了然</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr[i] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// let&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	arr[i] = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中数组的迭代方法：forEach、map、filter、reduce、every、some</title>
    <link href="https://sunnyShining.github.io/2018/arrayOptions/"/>
    <id>https://sunnyShining.github.io/2018/arrayOptions/</id>
    <published>2018-10-24T09:48:23.000Z</published>
    <updated>2019-06-29T09:04:59.593Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://juejin.im/post/5835808067f3560065ed4ab2" target="_blank" rel="noopener">一张图看懂JavaScript中数组的迭代方法：forEach、map、filter、reduce、every、some</a></p><a id="more"></a><p><img src="/2018/arrayOptions/array_options1.png" alt="array_options1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://juejin.im/post/5835808067f3560065ed4ab2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一张图看懂JavaScript中数组的迭代方法：forEach、map、filter、reduce、every、some&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript的宏任务和微任务</title>
    <link href="https://sunnyShining.github.io/2018/jsTask/"/>
    <id>https://sunnyShining.github.io/2018/jsTask/</id>
    <published>2018-10-24T06:44:57.000Z</published>
    <updated>2019-06-29T09:04:59.605Z</updated>
    
    <content type="html"><![CDATA[<p>文章参考<a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener">详解JavaScript中的Event Loop（事件循环）机制</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道，javascript从诞生之日起就是一门单线程的非阻塞的脚本语言，也就是说，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。这是由其最初的用途来决定的：与浏览器交互。JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>当然，现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了web worker技术。这项技术号称让javascript成为一门多线程语言。然而，使用web worker技术开的多线程有着诸多限制，例如：所有新线程都受主线程的完全控制，不能独立执行。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。</p><p>可以预见，未来的javascript也会一直是一门单线程的语言。</p><p>话说回来，前面提到javascript的另一个特点是“非阻塞”，那么javascript引擎到底是如何实现的这一点呢？答案就是今天这篇文章的主角——event loop（事件循环）。</p><a id="more"></a><blockquote><p>注：虽然nodejs中的也存在与传统浏览器环境下的相似的事件循环。然而两者间却有着诸多不同，故把两者分开，单独解释。</p></blockquote><h2 id="浏览器环境下js引擎的事件循环机制"><a href="#浏览器环境下js引擎的事件循环机制" class="headerlink" title="浏览器环境下js引擎的事件循环机制"></a>浏览器环境下js引擎的事件循环机制</h2><h3 id="1-执行栈与事件队列"><a href="#1-执行栈与事件队列" class="headerlink" title="1.执行栈与事件队列"></a>1.执行栈与事件队列</h3><p>当javascript代码执行的时候会将不同的变量存于内存中的不同位置：堆（heap）和栈（stack）中来加以区分。其中，堆里存放着一些对象。而栈中则存放着一些基础类型变量以及对象的指针。 但是我们这里说的执行栈和上面这个栈的意义却有些不同。</p><p>我们知道，当我们调用一个方法的时候，js会生成一个与这个方法对应的执行环境（context），又叫执行上下文。这个执行环境中存在着这个方法的私有作用域，上层作用域的指向，方法的参数，这个作用域中定义的变量以及这个作用域的this对象。 而当一系列方法被依次调用的时候，因为js是单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方。这个地方被称为执行栈。</p><p>当一个脚本第一次执行的时候，js引擎会解析这段代码，并将其中的同步代码按照执行顺序加入执行栈中，然后从头开始执行。如果当前执行的是一个方法，那么js会向执行栈中添加这个方法的执行环境，然后进入这个执行环境继续执行其中的代码。当这个执行环境中的代码 执行完毕并返回结果后，js会退出这个执行环境并把这个执行环境销毁，回到上一个方法的执行环境（后进先出）。这个过程反复进行，直到执行栈中的代码全部执行完毕。</p><p>下面这个图片非常直观的展示了这个过程，其中的global就是初次运行脚本时向执行栈中加入的代码：</p><p><img src="https://pic2.zhimg.com/v2-2f761eb83b50f53d741e6aa1f15a9db1_b.gif" alt="执行"></p><p>从图片可知，一个方法执行会向执行栈中加入这个方法的执行环境，在这个执行环境中还可以调用其他方法，甚至是自己，其结果不过是在执行栈中再添加一个执行环境。这个过程可以是无限进行下去的，除非发生了栈溢出，即超过了所能使用内存的最大值。</p><p>以上的过程说的都是同步代码的执行。那么当一个异步代码（如发送ajax请求数据）执行后会如何呢？前文提过，js的另一大特点是非阻塞，实现这一点的关键在于下面要说的这项机制——事件队列（Task Queue）。</p><p>js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</p><p>这里还有一张图来展示这个过程：</p><p><img src="https://pic4.zhimg.com/80/v2-da078fa3eadf3db4bf455904ae06f84b_hd.jpg" alt="Event Loop"></p><p>图中的stack表示我们所说的执行栈，web apis则是代表一些异步事件，而callback queue即事件队列。</p><h3 id="2-macro-task与micro-task"><a href="#2-macro-task与micro-task" class="headerlink" title="2.macro task与micro task"></a>2.macro task与micro task</h3><p>以上的事件循环过程是一个宏观的表述，实际上因为异步任务之间并不相同，因此他们的执行优先级也有区别。不同的异步任务被分为两类：微任务（micro task）和宏任务（macro task）。</p><p>以下事件属于宏任务：</p><p>setInterval()<br>setTimeout()</p><p>以下事件属于微任务</p><p>new Promise()<br>new MutaionObserver()</p><p>前面我们介绍过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。然而，根据这个异步事件的类型，这个事件实际上会被对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会 查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回到加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p>我们只需记住<strong>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'31'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'41'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'5'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><p>1 5 8 31 3 6 41 4 2 7</p><h2 id="node环境下的事件循环机制"><a href="#node环境下的事件循环机制" class="headerlink" title="node环境下的事件循环机制"></a>node环境下的事件循环机制</h2><h3 id="1-与浏览器环境有何不同"><a href="#1-与浏览器环境有何不同" class="headerlink" title="1.与浏览器环境有何不同?"></a>1.与浏览器环境有何不同?</h3><p>在node中，事件循环表现出的状态与浏览器中大致相同。不同的是node中有一套自己的模型。node中事件循环的实现是依靠的libuv引擎。我们知道node选择chrome v8引擎作为js解释器，v8引擎将js代码分析后去调用对应的node api，而这些api最后则由libuv引擎驱动，执行对应的任务，并把不同的事件放在不同的队列中等待主线程执行。 因此实际上node中的事件循环存在于libuv引擎中。</p><h3 id="2-事件循环模型"><a href="#2-事件循环模型" class="headerlink" title="2.事件循环模型"></a>2.事件循环模型</h3><p>下面是一个libuv引擎中的事件循环的模型:</p><p> ┌───────────────────────┐<br>┌─&gt;│        timers         │<br>│  └──────────┬────────────┘<br>│  ┌──────────┴────────────┐<br>│  │     I/O callbacks     │<br>│  └──────────┬────────────┘<br>│  ┌──────────┴────────────┐<br>│  │     idle, prepare     │<br>│  └──────────┬────────────┘      ┌───────────────┐<br>│  ┌──────────┴────────────┐      │   incoming:   │<br>│  │         poll          │&lt;──connections───     │<br>│  └──────────┬────────────┘      │   data, etc.  │<br>│  ┌──────────┴────────────┐      └───────────────┘<br>│  │        check          │<br>│  └──────────┬────────────┘<br>│  ┌──────────┴────────────┐<br>└──┤    close callbacks    │<br>   └───────────────────────┘</p><p>注：模型中的每一个方块代表事件循环的一个阶段</p><p>这个模型是node官网上的一篇文章中给出的。</p><h3 id="3-事件循环各阶段详解"><a href="#3-事件循环各阶段详解" class="headerlink" title="3.事件循环各阶段详解"></a>3.事件循环各阶段详解</h3><p>从上面这个模型中，我们可以大致分析出node中的事件循环的顺序：</p><p>外部输入数据–&gt;轮询阶段(poll)–&gt;检查阶段(check)–&gt;关闭事件回调阶段(close callback)–&gt;定时器检测阶段(timer)–&gt;I/O事件回调阶段(I/O callbacks)–&gt;闲置阶段(idle, prepare)–&gt;轮询阶段…</p><p>以上各阶段的名称是根据我个人理解的翻译，为了避免错误和歧义，下面解释的时候会用英文来表示这些阶段。</p><p>这些阶段大致的功能如下：</p><p>timers: 这个阶段执行定时器队列中的回调如 setTimeout() 和 setInterval()。<br>I/O callbacks: 这个阶段执行几乎所有的回调。但是不包括close事件，定时器和setImmediate()的回调。<br>idle, prepare: 这个阶段仅在内部使用，可以不必理会。<br>poll: 等待新的I/O事件，node在一些特殊情况下会阻塞在这里。<br>check: setImmediate()的回调会在这个阶段执行。<br>close callbacks: 例如socket.on(‘close’, …)这种close事件的回调。<br>下面我们来按照代码第一次进入libuv引擎后的顺序来详细解说这些阶段：</p><h4 id="poll阶段"><a href="#poll阶段" class="headerlink" title="poll阶段"></a>poll阶段</h4><p>当个v8引擎将js代码解析后传入libuv引擎后，循环首先进入poll阶段。poll阶段的执行逻辑如下： 先查看poll queue中是否有事件，有任务就按先进先出的顺序依次执行回调。 当queue为空时，会检查是否有setImmediate()的callback，如果有就进入check阶段执行这些callback。但同时也会检查是否有到期的timer，如果有，就把这些到期的timer的callback按照调用顺序放到timer queue中，之后循环会进入timer阶段执行queue中的 callback。 这两者的顺序是不固定的，收到代码运行的环境的影响。如果两者的queue都是空的，那么loop会在poll阶段停留，直到有一个i/o事件返回，循环会进入i/o callback阶段并立即执行这个事件的callback。</p><p>值得注意的是，poll阶段在执行poll queue中的回调时实际上不会无限的执行下去。有两种情况poll阶段会终止执行poll queue中的下一个回调：1.所有回调执行完毕。2.执行数超过了node的限制。</p><h4 id="check阶段"><a href="#check阶段" class="headerlink" title="check阶段"></a>check阶段</h4><p>check阶段专门用来执行setImmediate()方法的回调，当poll阶段进入空闲状态，并且setImmediate queue中有callback时，事件循环进入这个阶段。</p><h4 id="close阶段"><a href="#close阶段" class="headerlink" title="close阶段"></a>close阶段</h4><p>当一个socket连接或者一个handle被突然关闭时（例如调用了socket.destroy()方法），close事件会被发送到这个阶段执行回调。否则事件会用process.nextTick（）方法发送出去。</p><h4 id="timer阶段"><a href="#timer阶段" class="headerlink" title="timer阶段"></a>timer阶段</h4><p>这个阶段以先进先出的方式执行所有到期的timer加入timer队列里的callback，一个timer callback指得是一个通过setTimeout或者setInterval函数设置的回调函数。</p><h4 id="I-O-callback阶段"><a href="#I-O-callback阶段" class="headerlink" title="I/O callback阶段"></a>I/O callback阶段</h4><p>如上文所言，这个阶段主要执行大部分I/O事件的回调，包括一些为操作系统执行的回调。例如一个TCP连接生错误时，系统需要执行回调来获得这个错误的报告。</p><h3 id="4-process-nextTick-setTimeout与setImmediate的区别与使用场景"><a href="#4-process-nextTick-setTimeout与setImmediate的区别与使用场景" class="headerlink" title="4.process.nextTick,setTimeout与setImmediate的区别与使用场景"></a>4.process.nextTick,setTimeout与setImmediate的区别与使用场景</h3><p>在node中有三个常用的用来推迟任务执行的方法：process.nextTick,setTimeout（setInterval与之相同）与setImmediate</p><p>这三者间存在着一些非常不同的区别：</p><h4 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a>process.nextTick()</h4><p>尽管没有提及，但是实际上node中存在着一个特殊的队列，即nextTick queue。这个队列中的回调执行虽然没有被表示为一个阶段，当时这些事件却会在每一个阶段执行完毕准备进入下一个阶段时优先执行。当事件循环准备进入下一个阶段之前，会先检查nextTick queue中是否有任务，如果有，那么会先清空这个队列。与执行poll queue中的任务不同的是，这个操作在队列清空前是不会停止的。这也就意味着，错误的使用process.nextTick()方法会导致node进入一个死循环。。直到内存泄漏。</p><p>那么合适使用这个方法比较合适呢？下面有一个例子：</p><p>const server = net.createServer(() =&gt; {}).listen(8080);</p><p>server.on(‘listening’, () =&gt; {});<br>这个例子中当，当listen方法被调用时，除非端口被占用，否则会立刻绑定在对应的端口上。这意味着此时这个端口可以立刻触发listening事件并执行其回调。然而，这时候on(‘listening)还没有将callback设置好，自然没有callback可以执行。为了避免出现这种情况，node会在listen事件中使用process.nextTick()方法，确保事件在回调函数绑定后被触发。</p><h4 id="setTimeout-和setImmediate"><a href="#setTimeout-和setImmediate" class="headerlink" title="setTimeout()和setImmediate()"></a>setTimeout()和setImmediate()</h4><p>在三个方法中，这两个方法最容易被弄混。实际上，某些情况下这两个方法的表现也非常相似。然而实际上，这两个方法的意义却大为不同。</p><p>setTimeout()方法是定义一个回调，并且希望这个回调在我们所指定的时间间隔后第一时间去执行。注意这个“第一时间执行”，这意味着，受到操作系统和当前执行任务的诸多影响，该回调并不会在我们预期的时间间隔后精准的执行。执行的时间存在一定的延迟和误差，这是不可避免的。node会在可以执行timer回调的第一时间去执行你所设定的任务。</p><p>setImmediate()方法从意义上将是立刻执行的意思，但是实际上它却是在一个固定的阶段才会执行回调，即poll阶段之后。有趣的是，这个名字的意义和之前提到过的process.nextTick()方法才是最匹配的。node的开发者们也清楚这两个方法的命名上存在一定的混淆，他们表示不会把这两个方法的名字调换过来—因为有大量的node程序使用着这两个方法，调换命名所带来的好处与它的影响相比不值一提。</p><p>setTimeout()和不设置时间间隔的setImmediate()表现上及其相似。猜猜下面这段代码的结果是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上，答案是不一定。没错，就连node的开发者都无法准确的判断这两者的顺序谁前谁后。这取决于这段代码的运行环境。运行环境中的各种复杂的情况会导致在同步队列里两个方法的顺序随机决定。但是，在一种情况下可以准确判断两个方法回调的执行顺序，那就是在一个I/O事件的回调中。下面这段代码的顺序永远是固定的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(__filename, () =&gt; &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout'</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>答案永远是：<br>immediate<br>timeout<br>因为在I/O事件的回调中，setImmediate方法的回调永远在timer的回调前执行。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>javascrit的事件循环是这门语言中非常重要且基础的概念。清楚的了解了事件循环的执行顺序和每一个阶段的特点，可以使我们对一段异步代码的执行顺序有一个清晰的认识，从而减少代码运行的不确定性。合理的使用各种延迟事件的方法，有助于代码更好的按照其优先级去执行。这篇文章期望用最易理解的方式和语言准确描述事件循环这个复杂过程，但由于作者自己水平有限，文章中难免出现疏漏。如果您发现了文章中的一些问题，欢迎在留言中提出，我会尽量回复这些评论，把错误更正。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33058983&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详解JavaScript中的Event Loop（事件循环）机制&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们都知道，javascript从诞生之日起就是一门单线程的非阻塞的脚本语言，也就是说，javascript代码在执行的任何时候，都只有一个主线程来处理所有的任务。这是由其最初的用途来决定的：与浏览器交互。JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？&lt;/p&gt;
&lt;p&gt;当然，现如今人们也意识到，单线程在保证了执行顺序的同时也限制了javascript的效率，因此开发出了web worker技术。这项技术号称让javascript成为一门多线程语言。然而，使用web worker技术开的多线程有着诸多限制，例如：所有新线程都受主线程的完全控制，不能独立执行。这意味着这些“线程” 实际上应属于主线程的子线程。另外，这些子线程并没有执行I/O操作的权限，只能为主线程分担一些诸如计算等任务。所以严格来讲这些线程并没有完整的功能，也因此这项技术并非改变了javascript语言的单线程本质。&lt;/p&gt;
&lt;p&gt;可以预见，未来的javascript也会一直是一门单线程的语言。&lt;/p&gt;
&lt;p&gt;话说回来，前面提到javascript的另一个特点是“非阻塞”，那么javascript引擎到底是如何实现的这一点呢？答案就是今天这篇文章的主角——event loop（事件循环）。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>linux基础命令</title>
    <link href="https://sunnyShining.github.io/2018/linuxBaseKnowledge/"/>
    <id>https://sunnyShining.github.io/2018/linuxBaseKnowledge/</id>
    <published>2018-10-05T09:39:17.000Z</published>
    <updated>2019-06-29T09:04:59.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文件管理"><a href="#一、文件管理" class="headerlink" title="一、文件管理"></a>一、文件管理</h2><h3 id="1-查看文件信息-ls"><a href="#1-查看文件信息-ls" class="headerlink" title="1. 查看文件信息: ls"></a>1. 查看文件信息: ls</h3><p>参数</p><ul><li>-a 显示指定目录下所有子目录和文件，包括隐藏文件</li><li>-l 列表的方式显示文件的详细信息</li><li>-h 利于人看，不是用默认的byte做单位，而根据实际情况调整</li></ul><p>输出重定向命令：ls &gt; test.txt<br><a id="more"></a></p><p>管道: |</p><h3 id="2-切换工具目录：cd"><a href="#2-切换工具目录：cd" class="headerlink" title="2. 切换工具目录：cd"></a>2. 切换工具目录：cd</h3><h3 id="3-显示当前路径：pwd"><a href="#3-显示当前路径：pwd" class="headerlink" title="3. 显示当前路径：pwd"></a>3. 显示当前路径：pwd</h3><h3 id="4-创建目录：mkdir"><a href="#4-创建目录：mkdir" class="headerlink" title="4. 创建目录：mkdir"></a>4. 创建目录：mkdir</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、文件管理&quot;&gt;&lt;a href=&quot;#一、文件管理&quot; class=&quot;headerlink&quot; title=&quot;一、文件管理&quot;&gt;&lt;/a&gt;一、文件管理&lt;/h2&gt;&lt;h3 id=&quot;1-查看文件信息-ls&quot;&gt;&lt;a href=&quot;#1-查看文件信息-ls&quot; class=&quot;headerlink&quot; title=&quot;1. 查看文件信息: ls&quot;&gt;&lt;/a&gt;1. 查看文件信息: ls&lt;/h3&gt;&lt;p&gt;参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a 显示指定目录下所有子目录和文件，包括隐藏文件&lt;/li&gt;
&lt;li&gt;-l 列表的方式显示文件的详细信息&lt;/li&gt;
&lt;li&gt;-h 利于人看，不是用默认的byte做单位，而根据实际情况调整&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出重定向命令：ls &amp;gt; test.txt&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="linux" scheme="https://sunnyShining.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>项目难点总结</title>
    <link href="https://sunnyShining.github.io/2018/difficulty/"/>
    <id>https://sunnyShining.github.io/2018/difficulty/</id>
    <published>2018-10-04T06:01:06.000Z</published>
    <updated>2019-06-29T09:04:59.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域"><a href="#万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域" class="headerlink" title="万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域"></a>万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域</h3><p>项目链接：<a href="https://h5-static.wanshifu.com/shifujie83/posterMaster.html" target="_blank" rel="noopener">https://h5-static.wanshifu.com/shifujie83/posterMaster.html</a></p><a id="more"></a><p>使用插件html2canvas.js，设置useCORS参数为true，并且修改后端修改nginx配置文件add_header Access-Control-Allow-Origin *，需要重启nginx，使用nginx代理去访问图片。</p><h3 id="万师傅8-3师傅节项目，师傅故事生成海报背景模糊"><a href="#万师傅8-3师傅节项目，师傅故事生成海报背景模糊" class="headerlink" title="万师傅8.3师傅节项目，师傅故事生成海报背景模糊"></a>万师傅8.3师傅节项目，师傅故事生成海报背景模糊</h3><p>项目链接：<a href="https://h5-static.wanshifu.com/shifujie83/posterMaster.html" target="_blank" rel="noopener">https://h5-static.wanshifu.com/shifujie83/posterMaster.html</a></p><p>不使用背景图片，而是直接在dom里面插入img标签即可</p><h3 id="万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱"><a href="#万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱" class="headerlink" title="万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱"></a>万师傅微信个人中心三期swiper，history需点击两次才能返回原页面，造成导航错乱</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域&quot;&gt;&lt;a href=&quot;#万师傅8-3师傅节项目，师傅故事生成海报，师傅头像图片跨域&quot; class=&quot;headerlink&quot; title=&quot;万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域&quot;&gt;&lt;/a&gt;万师傅8.3师傅节项目，师傅故事生成海报，师傅头像图片跨域&lt;/h3&gt;&lt;p&gt;项目链接：&lt;a href=&quot;https://h5-static.wanshifu.com/shifujie83/posterMaster.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://h5-static.wanshifu.com/shifujie83/posterMaster.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="codeing" scheme="https://sunnyShining.github.io/tags/codeing/"/>
    
  </entry>
  
  <entry>
    <title>语录，记录每一天</title>
    <link href="https://sunnyShining.github.io/2018/quotation/"/>
    <id>https://sunnyShining.github.io/2018/quotation/</id>
    <published>2018-10-02T07:04:09.000Z</published>
    <updated>2019-06-29T09:04:59.607Z</updated>
    
    <content type="html"><![CDATA[<p>随记语录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当你的才华还撑不起你的野心时，那你就应该静下心来学习，当你的能力还驾驭不了你的目标时，那就应该沉下心来历练。 --莫言</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">弱者总是用善良来掩饰内心的软弱，而强者从不畏惧对手的强势。 --卫庄</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">活在当下，别在怀念过去或者憧憬未来中浪费掉你现在的生活</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间会刺破青春表面的彩饰，会在美人的额上掘深深浅槽。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不乱于心，不困于情。不畏将来，不念过往。如此，安好。 --丰子恺</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">趁阳光还暖，心还软，做一些自己认为正确的事，包括喜欢一个对的人。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我不会忘记每一场哭泣。那是我懦弱的见证。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为孤独从来不被懂，所以向来都波澜不惊</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果没有穿越过漫漫黑暗，没有经历过痛彻心扉的过往，你永远不会明白看到星光时的喜悦，也自然不会懂得黎明的意义。 --你的坚持，终将美好</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为孤独从来不被懂 所以向来都波澜不惊</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随记语录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当你的才华还撑不起你的野心时，那你就应该静下心来学习，当你的能力还驾驭不了你的目标时，那就应该沉下心来历练。 --莫言&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="生活" scheme="https://sunnyShining.github.io/categories/life/"/>
    
    
      <category term="生活" scheme="https://sunnyShining.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python3一些基础知识</title>
    <link href="https://sunnyShining.github.io/2018/python3BaseKnowledge/"/>
    <id>https://sunnyShining.github.io/2018/python3BaseKnowledge/</id>
    <published>2018-10-02T06:08:33.000Z</published>
    <updated>2019-06-29T09:04:59.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="keyword">lambda</span> x:x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">A(<span class="number">1</span>) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>lambda函数设计出来是为了简化def的。简单的理解，冒号左边→想要传递的参数，冒号右边→想要得到的数（可能带表达式）</p><a id="more"></a><h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map() 函数"></a>map() 函数</h2><p>map() 会根据提供的函数对指定序列做映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...) <span class="comment"># 第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x, y, z: (x + y + z) ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>], [<span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>])) <span class="comment"># [196, 400, 676, 1024, 1444]</span></span><br></pre></td></tr></table></figure><h2 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce() 函数"></a>reduce() 函数</h2><p>reduce（）的使用方法形如reduce(f(x),Itera).对，它的形式和map()函数一样。不过参数f（x）必须有两个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>]) <span class="comment"># 256</span></span><br></pre></td></tr></table></figure><h2 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter() 函数"></a>filter() 函数</h2><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，可以使用 list() 来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> != <span class="number">0</span>, [<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>])) <span class="comment"># [5, 7, 11]</span></span><br></pre></td></tr></table></figure><h2 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted() 函数"></a>sorted() 函数</h2><p>sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序。要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted([<span class="number">1</span>, <span class="number">-2</span>, <span class="number">4</span>, <span class="number">-111</span>, <span class="number">20</span>], key=abs, reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lambda-函数&quot;&gt;&lt;a href=&quot;#lambda-函数&quot; class=&quot;headerlink&quot; title=&quot;lambda 函数&quot;&gt;&lt;/a&gt;lambda 函数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x:x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;lambda函数设计出来是为了简化def的。简单的理解，冒号左边→想要传递的参数，冒号右边→想要得到的数（可能带表达式）&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="python" scheme="https://sunnyShining.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>程序员的成长之路</title>
    <link href="https://sunnyShining.github.io/2018/beACoder/"/>
    <id>https://sunnyShining.github.io/2018/beACoder/</id>
    <published>2018-09-27T02:18:48.000Z</published>
    <updated>2019-06-29T09:04:59.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>今日风和，太阳火辣辣的照着地面，看着CSDN上一篇篇<a href="https://blog.csdn.net/blogdevteam/article/details/72917467" target="_blank" rel="noopener">从高考到程序员</a>专题的文章，回想下我是如何走上coder这条道路的。<br><a id="more"></a></p><h2 id="2、求学之路"><a href="#2、求学之路" class="headerlink" title="2、求学之路"></a>2、求学之路</h2><p>我相信很多人的求学之路都不是那么顺利，当然我的也一样，我小时候是一个很羞涩的小男孩，在家很懂事，在外不敢发声，所以在小学和初中少不了被别人欺负，那时候我相信，只要好好学习，一定会有所成。</p><p>事与愿违，好好学习的我初一成了我们班最差的学生之一。那时候考完，在120分数学的面前我仅拿了27分，震惊了我自己，同时也震惊了我父母，他们自然少不了被同村人嘲笑。尤其是和我一个年级朋友的父母，那时候我记得，父亲一回家，狠狠的说了我一顿。我那时候不知道该如何自处，想到过失败没想过这么失败。那时候可能是武侠剧看多了吧，我刺破食指，流出来鲜血，想写血书。发誓让自己好好学习，那时候的感觉第一是疼，第二是压根就没那么多血，根本写不了一个字。但形式还是做了，我开始了我好好学习的生涯。在我初中毕业前，年级第二第一的位置一直为我敞开，所以最后我上了我们县城的重点高中—上高二中。</p><p>进入高中后，我才发现，以前我在山村里面的成绩在这县城高中里面简直就是毛毛雨。我那时候被分配到了学校最差的班，继续我的高中学业。然而到了高三那会，我已到了学校最好的班级。2010年，我第一年参加高考。当结果出来时，我震惊了，我仅比一本线高出几分，加上没有人指导我报考，我随意挑选了几所大学，最后云南大学通信工程录取了我。母亲那时候和我说，自己好好考虑下，是去复读还是去上大学。我心中有太多不甘，几夜未眠，咬咬牙，选择了复读。复读的日子是苦闷的，我那时候几乎没有听过一节课，天天在做题，天天想着高考。从开始的桌面空无一物，到毕业时的满满一袋，我也不知道我刷了多少题，我现在很佩服当时的自己。到高考那会我却内心紧张万分。当考完数学的时候，我觉得我整个人生就是一个错误，紧张是我考的一塌糊涂。那晚班主任和我讲，要我晚自习回去睡一下，把握好最后一门。s感谢他，让我抓住最后的机会，考上了重点。后来考试结果出来，我每天缠着他，教我报考，最终上了武汉理工大学矿物加工工程。</p><p>那时候刚进学校系主任和我们讲，你们很幸运，我们这个专业是学院最好的专业，一般进国企，进研究院，多努力，以后会有所成。我很开心，相信了他的话。我也开始好好学习，大一大二大三我都拿到了奖学金，数学在整个学院面前更是舍我其谁。同时顺利的也成了学习委员，一干就是三年。大四快毕业那会，正是要决定找工作还是读研的时候，大家突然翻开学校的就业中心，发现压根就没有我们专业的招聘，才知道一向温文尔雅的系主任骗了我们，我们专业压根毕业就面临失业。我那个恨，对老师这个词语重新理解了一番。我那时由于不想让贫穷的父母继续支持我的学业，也由于年龄太大也不想着继续追寻我的学历，便在一个国企矿山上找了份工作，于2015年7月14日，我到国企报到了。</p><p>很多人向往国企，当时我也是。我在进入国企的第一天，在山上招待所住的，整个招待所空无一人，管理员5点左右便早早的下班了，整个晚上山上只有虫鸣和蚊子和我相伴。走廊一闪一闪的灯光在漆黑的夜空显得分外的恐怖。月底来了个研究生，我俩在这个环境下待了一个多月。我每天得忍受机器的轰鸣声和各种各样的矿石灰尘，每个月拿着两千左右的工资。我想我的人生难道一直这样，碌碌无为？终于，我无法容忍。我感觉我来矿山许久，我冲过沙子，扛过钢管，背过沙包，扫过地等等，然而没有学习过任何知识。我的知识完全没有长进，只有了体力的长进。我找大学同学了解他们现在在从事啥，想过和同学去培训机构教书，想过去武汉找一位室友，听说他在武汉做销售（后来证实在搞传销）。万分绝望，有个朋友找到了我，说服我我去学习IT。各种综合考量之下，终于2016年5月8日我办完所有手续，离开了公司， 来到深圳投靠那同学。</p><p>我于2016年5月11日正式进入一家培训机构学习，算是正式开始了我的程序员生涯。由于当前前端较快毕业，就业率高，身上没钱，我便选择了学习前端开发。每每打电话回家，我跟父母讲我有钱，然而我却借了高利贷。学习的日子总是轻松的，或许我适合学习吧，一晃一个多月过去了，我终于毕业了。毕业了就意味这要去找工作，很幸运2016年7月21日我进了一家外包公司，辗转外包到了平安银行。幸运的是我遇到一位大神，他会跟我讲哪些知识我该去学习，这对我以后的技术有很大的帮助。终于在泡过很多天的图书馆之后，我渐渐成熟起来，也能独当一面了，我也开始带起来我的第一个徒弟。后来我想有更长远的发展，有更高的薪水，于2018年3月26日，我离开平安银行，2018年3月27日入职一家私企—深圳小亿网络科技有限公司（万师傅）。在刚开始入职这公司的时候，我对公司h5代码架构方面进行升级，使未来更容易维护项目，并搭起一套新项目脚手架。在空闲时间不断的对python3和RN进行学习，感觉自己知识越来越丰富，希望未来走的更远。</p><h2 id="3、后记"><a href="#3、后记" class="headerlink" title="3、后记"></a>3、后记</h2><p><strong>愿自己可以活到老，学到老，做一个永不停歇的程序员</strong></p><p><strong>愿所有人的青春，都能被温柔以待</strong></p><h2 id="4、附一些照片"><a href="#4、附一些照片" class="headerlink" title="4、附一些照片"></a>4、附一些照片</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h2&gt;&lt;p&gt;今日风和，太阳火辣辣的照着地面，看着CSDN上一篇篇&lt;a href=&quot;https://blog.csdn.net/blogdevteam/article/details/72917467&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从高考到程序员&lt;/a&gt;专题的文章，回想下我是如何走上coder这条道路的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://sunnyShining.github.io/categories/life/"/>
    
    
      <category term="生活" scheme="https://sunnyShining.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python3批量压缩图片</title>
    <link href="https://sunnyShining.github.io/2018/pythonCompressImg/"/>
    <id>https://sunnyShining.github.io/2018/pythonCompressImg/</id>
    <published>2018-09-26T08:56:30.000Z</published>
    <updated>2019-06-29T09:04:59.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPNG</a>和<a href="https://tinyjpg.com/" target="_blank" rel="noopener">TinyJPG</a>两个网站提供了.png和.jpg格式图片压缩和优化的功能。虽然可以很轻松地使用网页版进行操作，但是有些时候，调用网站提供的API更为方便快捷。tinify模块就是由TinyPNG提供的使用Python调用Tiny PNG API的模块。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade tinify</span><br></pre></td></tr></table></figure><h2 id="获取tinify-API-key"><a href="#获取tinify-API-key" class="headerlink" title="获取tinify API key"></a>获取tinify API key</h2><p>如果想调用TinyPNG的API，需要先在他们的网站<a href="https://tinypng.com/dashboard/api" target="_blank" rel="noopener">TinyPNG Developer API</a>上申请一个API key用于身份验证。提供名称和邮箱，就可以获得一个API key，API key会以链接的形式发到邮箱里，可以使用icloud和outlook邮箱，不可使用qq邮箱，申请成功如下</p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-5216b3b7091a201d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="api_key"></p><h2 id="编写python3代码"><a href="#编写python3代码" class="headerlink" title="编写python3代码"></a>编写python3代码</h2><p>1、获取终端输入的文件目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    tinypng [-d] &lt;dir&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">    -h,--help   显示帮助菜单</span></span><br><span class="line"><span class="string">    -d          压缩目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    tinypng -d /Users/sunny/Desktop/xxx</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">arguments = docopt(__doc__)</span><br><span class="line">finder = arguments[<span class="string">'&lt;dir&gt;'</span>]</span><br></pre></td></tr></table></figure><p>2、获取目录下图片文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图片路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_path</span><span class="params">(self, finder)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> os.listdir(finder):</span><br><span class="line">        temp_path = os.path.join(finder, p)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(temp_path):</span><br><span class="line">            self.get_img_path(temp_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.png'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpg'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpeg'</span>:</span><br><span class="line">                self.png_path.append(os.path.join(finder, p))</span><br></pre></td></tr></table></figure><p>3、压缩图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_compress</span> <span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> self.png_path:</span><br><span class="line">        self.compress_file(os.path.abspath(file))</span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress_file</span> <span class="params">(self, inputFile, width=None)</span>:</span></span><br><span class="line">    print(<span class="string">'-----------------compress start-----------------'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(inputFile):</span><br><span class="line">        print(<span class="string">'这不是一个文件，请输入文件的正确路径!'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dirname  = os.path.dirname(inputFile)</span><br><span class="line">        basename = os.path.basename(inputFile)</span><br><span class="line">        fileName, fileSuffix = os.path.splitext(basename)</span><br><span class="line">        print(<span class="string">'dirname=%s, basename=%s, fileName=%s, fileSuffix=%s'</span> % (dirname, basename, fileName, fileSuffix))</span><br><span class="line">        <span class="keyword">if</span> fileSuffix == <span class="string">'.png'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpg'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpeg'</span>:</span><br><span class="line">            dir_list = dirname.split(self.finder)</span><br><span class="line">            <span class="keyword">if</span> dir_list[<span class="number">1</span>] != <span class="string">''</span> <span class="keyword">and</span> dir_list[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">                dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>][<span class="number">1</span>:])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>])</span><br><span class="line">            self.mkdir(dir)</span><br><span class="line">            self.compress(inputFile, <span class="string">f'<span class="subst">&#123;dir&#125;</span>/<span class="subst">&#123;basename&#125;</span>'</span>, width)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;fileName&#125;</span>不支持该文件类型压缩!'</span>)</span><br><span class="line">    print(<span class="string">'-----------------compress end-----------------'</span>)</span><br><span class="line"><span class="comment"># 压缩图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span> <span class="params">(self, inputFile, outputFile, img_width)</span>:</span></span><br><span class="line">    source = tinify.from_file(inputFile)</span><br><span class="line">    <span class="keyword">if</span> img_width <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        resized = source.resize(method=<span class="string">'scale'</span>, width=img_width)</span><br><span class="line">        resized.to_file(outputFile)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        source.to_file(outputFile)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line"><span class="comment"># 新建文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span> <span class="params">(self, path)</span>:</span></span><br><span class="line">    exist = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exist:</span><br><span class="line">        print(<span class="string">f'建了一个名字叫做<span class="subst">&#123;path&#125;</span>的文件夹！'</span>)</span><br><span class="line">        os.makedirs(path)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'名字叫做<span class="subst">&#123;path&#125;</span>的文件夹已经存在了！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>4、完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">    tinypng [-d] &lt;dir&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">    -h,--help   显示帮助菜单</span></span><br><span class="line"><span class="string">    -d          压缩目录</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    tinypng -d /Users/sunny/Desktop/xxx</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> tinify, os</span><br><span class="line"><span class="keyword">from</span> docopt <span class="keyword">import</span> docopt</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'sunny'</span></span><br><span class="line">__date__ = <span class="string">'2018/09/26'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请替换为自己申请的Key</span></span><br><span class="line">tinify.key = <span class="string">'6OB4sxKcwILxBSzknRKvdbL22f1UDIFv'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompressImg</span> <span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self, finder)</span>:</span></span><br><span class="line">        self.png_path = []</span><br><span class="line">        self.finder = finder</span><br><span class="line">    <span class="comment"># 获取图片路径</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_img_path</span><span class="params">(self, finder)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> os.listdir(finder):</span><br><span class="line">            temp_path = os.path.join(finder, p)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(temp_path):</span><br><span class="line">                self.get_img_path(temp_path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.png'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpg'</span> <span class="keyword">or</span> os.path.splitext(p)[<span class="number">1</span>] == <span class="string">'.jpeg'</span>:</span><br><span class="line">                    self.png_path.append(os.path.join(finder, p))</span><br><span class="line">    <span class="comment"># 循环文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_compress</span> <span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> self.png_path:</span><br><span class="line">            self.compress_file(os.path.abspath(file))</span><br><span class="line">    <span class="comment"># 压缩文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compress_file</span> <span class="params">(self, inputFile, width=None)</span>:</span></span><br><span class="line">        print(<span class="string">'-----------------compress start-----------------'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(inputFile):</span><br><span class="line">            print(<span class="string">'这不是一个文件，请输入文件的正确路径!'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dirname  = os.path.dirname(inputFile)</span><br><span class="line">            basename = os.path.basename(inputFile)</span><br><span class="line">            fileName, fileSuffix = os.path.splitext(basename)</span><br><span class="line">            print(<span class="string">'dirname=%s, basename=%s, fileName=%s, fileSuffix=%s'</span> % (dirname, basename, fileName, fileSuffix))</span><br><span class="line">            <span class="keyword">if</span> fileSuffix == <span class="string">'.png'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpg'</span> <span class="keyword">or</span> fileSuffix == <span class="string">'.jpeg'</span>:</span><br><span class="line">                dir_list = dirname.split(self.finder)</span><br><span class="line">                <span class="keyword">if</span> dir_list[<span class="number">1</span>] != <span class="string">''</span> <span class="keyword">and</span> dir_list[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>:</span><br><span class="line">                    dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>][<span class="number">1</span>:])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dir = os.path.join(self.finder, <span class="string">'tiny'</span>, dir_list[<span class="number">1</span>])</span><br><span class="line">                self.mkdir(dir)</span><br><span class="line">                self.compress(inputFile, <span class="string">f'<span class="subst">&#123;dir&#125;</span>/<span class="subst">&#123;basename&#125;</span>'</span>, width)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">f'<span class="subst">&#123;fileName&#125;</span>不支持该文件类型压缩!'</span>)</span><br><span class="line">        print(<span class="string">'-----------------compress end-----------------'</span>)</span><br><span class="line">    <span class="comment"># 压缩图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compress</span> <span class="params">(self, inputFile, outputFile, img_width)</span>:</span></span><br><span class="line">        source = tinify.from_file(inputFile)</span><br><span class="line">        <span class="keyword">if</span> img_width <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            resized = source.resize(method=<span class="string">'scale'</span>, width=img_width)</span><br><span class="line">            resized.to_file(outputFile)</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            source.to_file(outputFile)</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;inputFile&#125;</span>压缩成功!'</span>)</span><br><span class="line">    <span class="comment"># 新建文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mkdir</span> <span class="params">(self, path)</span>:</span></span><br><span class="line">        exist = os.path.exists(path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exist:</span><br><span class="line">            print(<span class="string">f'建了一个名字叫做<span class="subst">&#123;path&#125;</span>的文件夹！'</span>)</span><br><span class="line">            os.makedirs(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'名字叫做<span class="subst">&#123;path&#125;</span>的文件夹已经存在了！'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span> <span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""command-line interface"""</span></span><br><span class="line">    arguments = docopt(__doc__)</span><br><span class="line">    finder = arguments[<span class="string">'&lt;dir&gt;'</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tinify.validate()</span><br><span class="line">        <span class="keyword">if</span> tinify.compression_count &lt; <span class="number">500</span>:</span><br><span class="line">            print(<span class="string">f'本月已压缩图片次数<span class="subst">&#123;tinify.compression_count&#125;</span>'</span>)</span><br><span class="line">            ci = CompressImg(finder)</span><br><span class="line">            ci.get_img_path(finder)</span><br><span class="line">            ci.handle_compress()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f'本月压缩图片次数不足'</span>)</span><br><span class="line">    <span class="keyword">except</span> tinify.Error <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;e&#125;</span>error'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 tinypng.py -d xxx (xxx为路径)</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/4605151-1d1c2c8fcc082c75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyPNG&lt;/a&gt;和&lt;a href=&quot;https://tinyjpg.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TinyJPG&lt;/a&gt;两个网站提供了.png和.jpg格式图片压缩和优化的功能。虽然可以很轻松地使用网页版进行操作，但是有些时候，调用网站提供的API更为方便快捷。tinify模块就是由TinyPNG提供的使用Python调用Tiny PNG API的模块。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="python" scheme="https://sunnyShining.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>urllib、pyquery下载笔趣阁小说</title>
    <link href="https://sunnyShining.github.io/2018/mojintianshi/"/>
    <id>https://sunnyShining.github.io/2018/mojintianshi/</id>
    <published>2018-09-25T06:28:04.000Z</published>
    <updated>2019-06-29T09:04:59.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、小说章节路径获取"><a href="#一、小说章节路径获取" class="headerlink" title="一、小说章节路径获取"></a>一、小说章节路径获取</h2><p><strong>1、爬取的小说名为摸金天师，小说首页为<a href="http://www.biquge.com.tw/18_18128/" target="_blank" rel="noopener">http://www.biquge.com.tw/18_18128/</a> ，通过urllib.request.urlopen获取页面HTTPResposne类型的对象，在通过read()方法获取页面内容</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request = urllib.request.Request(url, headers=headers)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    content = urllib.request.urlopen(request)</span><br><span class="line">    text = str(content.read(), encoding = <span class="string">'gbk'</span>)</span><br><span class="line">    content.close()</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br></pre></td></tr></table></figure><p><strong>2、审查章节元素，获取章节路径</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-9019dc0a25798009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="chapters"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_chapter</span><span class="params">(self)</span>:</span></span><br><span class="line">    html = self.request(self.url)</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    all_chapters = doc(<span class="string">'#list a'</span>).items()</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> all_chapters:</span><br><span class="line">        text = a.text()</span><br><span class="line">        href = self.domain + a.attr(<span class="string">'href'</span>)</span><br><span class="line">        self.chapter_titles.append(text)</span><br><span class="line">        self.chapter_urls.append(href)</span><br></pre></td></tr></table></figure><p><strong>3、审查页面元素，获取每个章节内容</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-3aaf6232e001bb2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="content"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, url)</span>:</span></span><br><span class="line">    html = self.request(url)</span><br><span class="line">    doc = pq(html)</span><br><span class="line">    content = doc(<span class="string">'#content'</span>).text()</span><br><span class="line">    content = content.replace(<span class="string">'\xa0'</span>*<span class="number">4</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p><strong>4、将文章输出txt</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span> <span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        write_flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br></pre></td></tr></table></figure><h2 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: sunny</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> sys, random, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadNovel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.chapter_urls = []</span><br><span class="line">        self.chapter_titles = []</span><br><span class="line">        self.domain = <span class="string">'http://www.biquge.com.tw'</span></span><br><span class="line">        self.sleep_download_time = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_chapter</span><span class="params">(self)</span>:</span></span><br><span class="line">        html = self.request(self.url)</span><br><span class="line">        doc = pq(html)</span><br><span class="line">        all_chapters = doc(<span class="string">'#list a'</span>).items()</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> all_chapters:</span><br><span class="line">            text = a.text()</span><br><span class="line">            href = self.domain + a.attr(<span class="string">'href'</span>)</span><br><span class="line">            self.chapter_titles.append(text)</span><br><span class="line">            self.chapter_urls.append(href)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        html = self.request(url)</span><br><span class="line">        doc = pq(html)</span><br><span class="line">        content = doc(<span class="string">'#content'</span>).text()</span><br><span class="line">        content = content.replace(<span class="string">'\xa0'</span>*<span class="number">4</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        time.sleep(self.sleep_download_time)</span><br><span class="line">        <span class="comment"># 动态userAgent</span></span><br><span class="line">        user_agent_list = [ \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span> \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>, \</span><br><span class="line">            <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span></span><br><span class="line">        ]</span><br><span class="line">        ua = random.choice(user_agent_list)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: ua</span><br><span class="line">        &#125;</span><br><span class="line">        request = urllib.request.Request(url, headers=headers)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = urllib.request.urlopen(request)</span><br><span class="line">            text = str(content.read(), encoding = <span class="string">'gbk'</span>)</span><br><span class="line">            content.close()</span><br><span class="line">            <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">            print(e.reason)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dl = DownloadNovel(<span class="string">'http://www.biquge.com.tw/18_18128/'</span>)</span><br><span class="line">    dl.get_all_chapter()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dl.chapter_titles)):</span><br><span class="line">        print(<span class="string">'url=%s, title=%s'</span> %(dl.chapter_urls[i],dl.chapter_titles[i]))</span><br><span class="line">        txt = dl.get_content(dl.chapter_urls[i])</span><br><span class="line">        dl.write(dl.chapter_titles[i], <span class="string">'摸金天师.txt'</span>, txt)</span><br><span class="line">        sys.stdout.write(<span class="string">'  已下载:%.3f%%'</span> % float(i/len(dl.chapter_titles)) + <span class="string">'\r'</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    print(<span class="string">'下载完成'</span>)</span><br></pre></td></tr></table></figure><h2 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/4605151-1e2236300bcb3142.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果"></p><h2 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h2><p>源码<a href="https://github.com/sunnyShining/python-spider/tree/master/mojintianshi" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、小说章节路径获取&quot;&gt;&lt;a href=&quot;#一、小说章节路径获取&quot; class=&quot;headerlink&quot; title=&quot;一、小说章节路径获取&quot;&gt;&lt;/a&gt;一、小说章节路径获取&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、爬取的小说名为摸金天师，小说首页为&lt;a href=&quot;http://www.biquge.com.tw/18_18128/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.biquge.com.tw/18_18128/&lt;/a&gt; ，通过urllib.request.urlopen获取页面HTTPResposne类型的对象，在通过read()方法获取页面内容&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="python" scheme="https://sunnyShining.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在线代码编辑器</title>
    <link href="https://sunnyShining.github.io/2018/editorOnline/"/>
    <id>https://sunnyShining.github.io/2018/editorOnline/</id>
    <published>2018-09-21T12:27:52.000Z</published>
    <updated>2019-06-29T09:04:59.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>纯粹为了在自己博客实现一个代码编辑器，方便在线测试各种代码。</p><h2 id="ace介绍"><a href="#ace介绍" class="headerlink" title="ace介绍"></a>ace介绍</h2><p>ACE 是一个开源的、独立的、基于浏览器的代码编辑器，可以嵌入到任何web页面或JavaScript应用程序中。ACE支持超过60种语言语法高亮，并能够处理代码多达400万行的大型文档。ACE开发团队称，ACE在性能和功能上可以媲美本地代码编辑器（如Sublime Text、TextMate和Vim等）。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>1.编写代码编辑器样式</strong></p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/4605151-b201cabc89add913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-09-21 下午8.21.06.png"></p><p><strong>2.引入ace.js</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./src-noconflict/ace.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./src-noconflict/ext-language_tools.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.调用ace api实现代码编辑功能</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editor1 = ace.edit(<span class="string">"editor1"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            theme: <span class="string">"ace/theme/monokai"</span>,</span></span><br><span class="line"><span class="javascript">            mode: <span class="string">"ace/mode/html"</span>,</span></span><br><span class="line"><span class="javascript">            wrap: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            autoScrollEditorIntoView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableBasicAutocompletion: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableSnippets: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableLiveAutocompletion: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editor2 = ace.edit(<span class="string">"editor2"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            theme: <span class="string">"ace/theme/monokai"</span>,</span></span><br><span class="line"><span class="javascript">            mode: <span class="string">"ace/mode/css"</span>,</span></span><br><span class="line"><span class="javascript">            autoScrollEditorIntoView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableBasicAutocompletion: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableSnippets: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableLiveAutocompletion: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> editor3 = ace.edit(<span class="string">"editor3"</span>, &#123;</span></span><br><span class="line"><span class="javascript">            theme: <span class="string">"ace/theme/monokai"</span>,</span></span><br><span class="line"><span class="javascript">            mode: <span class="string">"ace/mode/javascript"</span>,</span></span><br><span class="line"><span class="javascript">            autoScrollEditorIntoView: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableBasicAutocompletion: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableSnippets: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            enableLiveAutocompletion: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> submit = <span class="built_in">document</span>.querySelector(<span class="string">'#submit'</span>);</span></span><br><span class="line"><span class="javascript">        submit.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> htmlValue = editor1.getValue();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cssValue = editor2.getValue();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> jsValue = editor3.getValue();</span></span><br><span class="line"><span class="xml">            var htmlStr = '<span class="meta">&lt;!DOCTYPE html&gt;</span>' +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;html&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;head&gt;'</span> +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">title</span>&gt;</span>代码测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"chrome=1,IE=edge"</span>/&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=0"</span>/&gt;</span>' +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="undefined">                cssValue +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/style&gt;'</span> +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'script&gt;'</span> +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="javascript">                <span class="string">'new window.VConsole();'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'script&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/head&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;body&gt;'</span> +</span></span><br><span class="line"><span class="undefined">                htmlValue +</span></span><br><span class="line"><span class="xml">                '<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">' +</span></span></span><br><span class="line"><span class="undefined">                jsValue +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'script&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/body&gt;'</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">'&lt;/html&gt;'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>).srcdoc = htmlStr;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)()</span></span><br></pre></td></tr></table></figure><p><strong>4.将写好的代码放入iframe中运行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>).srcdoc = htmlStr;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sunnyShining/editor-online" target="_blank" rel="noopener">源码</a></p><p>效果见我的博客<a href="https://sunnyshining.github.io/lab/index.html">https://sunnyshining.github.io/lab/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;纯粹为了在自己博客实现一个代码编辑器，方便在线测试各种代码。&lt;/p&gt;
&lt;h2 id=&quot;ace介绍&quot;&gt;&lt;a href=&quot;#ace介绍&quot; class=&quot;headerlink&quot; title=&quot;ace介绍&quot;&gt;&lt;/a&gt;ace介绍&lt;/h2&gt;&lt;p&gt;ACE 是一个开源的、独立的、基于浏览器的代码编辑器，可以嵌入到任何web页面或JavaScript应用程序中。ACE支持超过60种语言语法高亮，并能够处理代码多达400万行的大型文档。ACE开发团队称，ACE在性能和功能上可以媲美本地代码编辑器（如Sublime Text、TextMate和Vim等）。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.编写代码编辑器样式&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="javascript" scheme="https://sunnyShining.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>微信H5移动端真机调试技巧。</title>
    <link href="https://sunnyShining.github.io/2018/debugSkill/"/>
    <id>https://sunnyShining.github.io/2018/debugSkill/</id>
    <published>2018-09-04T02:47:20.000Z</published>
    <updated>2019-06-29T09:04:59.603Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://sunnyshining.github.io/2018/debug-skill/index.html">原文链接</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在移动端开发过程中，尤其像在万师傅<a href="https://wxuser.wanshifu.com/" target="_blank" rel="noopener">微信个人中心</a>开发过程中，如果遇到比较棘手的bug，想通过F12调出控制台看下哪里出了问题，是不可能的，但是有bug总得解决所以，需要掌握下移动端的调试技巧</p><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>以下介绍几种方法</p><h3 id="1、使用vconsole（适用于ios和Android）"><a href="#1、使用vconsole（适用于ios和Android）" class="headerlink" title="1、使用vconsole（适用于ios和Android）"></a>1、使用vconsole（适用于ios和Android）</h3><p><a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">vConsole</a>是由腾讯出品的一个轻量、可拓展、针对手机网页的前端开发者调试面板，它的功效有很多：查看 console 日志、查看网络请求、查看页面 element 结构、查看 Cookies 和localStorage、手动执行 JS 命令行、自定义插件。<br>具体使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vconsole = <span class="built_in">require</span>(<span class="string">'PLUGINS/vconsole.min'</span>);</span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/MicroMessenger/i</span>.test(<span class="built_in">window</span>.navigator.userAgent.toLowerCase())) &#123;</span><br><span class="line">    <span class="keyword">new</span> Vconsole();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"path/to/vconsole.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://qncdn.wanshifu.com/7081e388fa8740319848b429cb459e12" alt="wechat"></p><p>其他高级用法可参考<a href="https://github.com/Tencent/vConsole/blob/dev/README_CN.md" target="_blank" rel="noopener">文档</a></p><h3 id="2、使用chrome-inspect调试（适用于android）"><a href="#2、使用chrome-inspect调试（适用于android）" class="headerlink" title="2、使用chrome://inspect调试（适用于android）"></a>2、使用chrome://inspect调试（适用于android）</h3><p>移动端开发时，我们常使用chrome自带的模拟器，模拟各种手机设备。 但模拟毕竟是模拟，当开发完毕，使用真机访问页面出现问题时如何调试呢？<br>答案是可以使用谷歌提供chrome://inspect进行像pc页面一样的调试，具体步骤如下</p><p>1、使用usb将手机的PC相连接；</p><p>2、手机中打开“设置”-&gt;”开发人员选项”-&gt;”USB调试”</p><p>3、打开pc侧chrome, 在地址栏中输入chrome://inspect/#devices 选中discover usb devices。可以看到我们的手机设备，如下图所示</p><p><img src="https://qncdn.wanshifu.com/57ad65c61444944b300485ef97fd1ccf" alt="chrome"></p><p>4、点击inspect即可像调试pc页面一样调试移动端页面，如下</p><p><img src="https://qncdn.wanshifu.com/e70a00b53e9d01e33996e62c971903f0" alt="example"></p><p>以上所讲调试适合移动端项目，微信里面h5页面也想实现这样调试，多做1个步骤即可。</p><p>1、微信浏览器打开<a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a> 这个链接，选择信息tab页，将打开TBS内核Inspector调试功能☑️即可，下方还有vconsole感兴趣也可以☑️</p><p><img src="https://qncdn.wanshifu.com/e0c124057be5e57ff03f9f2db325e84c" alt="tbs"></p><p>2、而后参考上面chrome://inspect调试</p><blockquote><p>如出现页面空白可参考链接<a href="https://www.cnblogs.com/slmk/p/7591126.html" target="_blank" rel="noopener">https://www.cnblogs.com/slmk/p/7591126.html</a> 解决</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://sunnyshining.github.io/2018/debug-skill/index.html&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在移动端开发过程中，尤其像在万师傅&lt;a href=&quot;https://wxuser.wanshifu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微信个人中心&lt;/a&gt;开发过程中，如果遇到比较棘手的bug，想通过F12调出控制台看下哪里出了问题，是不可能的，但是有bug总得解决所以，需要掌握下移动端的调试技巧&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="codeing" scheme="https://sunnyShining.github.io/tags/codeing/"/>
    
  </entry>
  
  <entry>
    <title>python3网络爬虫，下载起点小说</title>
    <link href="https://sunnyShining.github.io/2018/python3DownloadNoval/"/>
    <id>https://sunnyShining.github.io/2018/python3DownloadNoval/</id>
    <published>2018-07-07T01:49:29.000Z</published>
    <updated>2019-06-29T09:04:59.606Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/daa4ffb4a5af" target="_blank" rel="noopener">简书</a>搬迁</p><h2 id="一、各章小说链接爬取"><a href="#一、各章小说链接爬取" class="headerlink" title="一、各章小说链接爬取"></a>一、各章小说链接爬取</h2><p><strong>1、章节URL：<a href="https://book.qidian.com/info/1012053141#Catalog" target="_blank" rel="noopener">https://book.qidian.com/info/1012053141#Catalog</a></strong></p><a id="more"></a><p><strong>2、经过审查元素各章节名称和链接如下图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-c73ac7110b1867bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.24.52.png"></p><p><strong>3、可以通过如下方法获取章节名和各章节链接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_download_chapter_url</span> <span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 用于爬取https</span></span><br><span class="line">    context = ssl._create_unverified_context()</span><br><span class="line">    response = urllib.request.urlopen(self.server, context = context)</span><br><span class="line">    text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">    div = bf.find_all(<span class="string">'div'</span>, class_ = <span class="string">'volume'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(div)):</span><br><span class="line">        li = div[i].find_all(<span class="string">'li'</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)):</span><br><span class="line">            a = li[j].find_all(<span class="string">'a'</span>)</span><br><span class="line">            html = BeautifulSoup(str(a), <span class="string">'lxml'</span>)</span><br><span class="line">            <span class="comment"># 章节url</span></span><br><span class="line">            self.chapterUrls.append(<span class="string">'https:'</span> + str(html.a.get(<span class="string">'href'</span>)))</span><br><span class="line">            <span class="comment"># 章节名</span></span><br><span class="line">            self.chapterNames.append(html.a.string)</span><br><span class="line">    print(self.chapterUrls)</span><br><span class="line">    print(self.chapterNames)</span><br></pre></td></tr></table></figure><p><strong>4、运行一下效果如下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-954fa89a181c0fb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.30.27.png"></p><h2 id="二、爬取所有章节内容，并保存到文件中"><a href="#二、爬取所有章节内容，并保存到文件中" class="headerlink" title="二、爬取所有章节内容，并保存到文件中"></a>二、爬取所有章节内容，并保存到文件中</h2><p><strong>1、爬取章节内容</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-4eaffdd9ff3ce388.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.33.11.png"><br>可以看出，小说章节内容全在某个div下，可通过下面方法爬取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_contents</span> <span class="params">(self, target)</span>:</span></span><br><span class="line">    context = ssl._create_unverified_context()</span><br><span class="line">    response = urllib.request.urlopen(target, context = context)</span><br><span class="line">    text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">    bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">    txts = bf.find_all(<span class="string">'div'</span>, class_=<span class="string">'read-content j_readContent'</span>)</span><br><span class="line">    txts = txts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span>*<span class="number">8</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> txts</span><br></pre></td></tr></table></figure></p><p><strong>2、将文章输出txt</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span> <span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        write_flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br></pre></td></tr></table></figure><h2 id="三、完整代码和效果"><a href="#三、完整代码和效果" class="headerlink" title="三、完整代码和效果"></a>三、完整代码和效果</h2><p><strong>1、完整代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/usr/bin/env Python3</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> string, ssl, sys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadNovel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span> <span class="params">(self, server)</span>:</span></span><br><span class="line">        self.server = server</span><br><span class="line">        <span class="comment"># 存放章节名</span></span><br><span class="line">        self.chapterNames = []</span><br><span class="line">        <span class="comment"># 存放章节链接</span></span><br><span class="line">        self.chapterUrls = []</span><br><span class="line">        <span class="comment"># 存放章节数</span></span><br><span class="line">        self.nums = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_chapter_url</span> <span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 用于爬取https</span></span><br><span class="line">        context = ssl._create_unverified_context()</span><br><span class="line">        response = urllib.request.urlopen(self.server, context = context)</span><br><span class="line">        text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">        bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">        div = bf.find_all(<span class="string">'div'</span>, class_ = <span class="string">'volume'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(div)):</span><br><span class="line">            li = div[i].find_all(<span class="string">'li'</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(li)):</span><br><span class="line">                a = li[j].find_all(<span class="string">'a'</span>)</span><br><span class="line">                html = BeautifulSoup(str(a), <span class="string">'lxml'</span>)</span><br><span class="line">                <span class="comment"># 章节url</span></span><br><span class="line">                self.chapterUrls.append(<span class="string">'https:'</span> + str(html.a.get(<span class="string">'href'</span>)))</span><br><span class="line">                <span class="comment"># 章节名</span></span><br><span class="line">                self.chapterNames.append(html.a.string)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_contents</span> <span class="params">(self, target)</span>:</span></span><br><span class="line">        context = ssl._create_unverified_context()</span><br><span class="line">        response = urllib.request.urlopen(target, context = context)</span><br><span class="line">        text = str(response.read(), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">        bf = BeautifulSoup(text, <span class="string">'html.parser'</span>)</span><br><span class="line">        txts = bf.find_all(<span class="string">'div'</span>, class_=<span class="string">'read-content j_readContent'</span>)</span><br><span class="line">        txts = txts[<span class="number">0</span>].text.replace(<span class="string">'\xa0'</span>*<span class="number">8</span>, <span class="string">'\n\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> txts</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span> <span class="params">(self, name, path, txt)</span>:</span></span><br><span class="line">        write_flag = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'a'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(name + <span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(txt)</span><br><span class="line">            f.write(<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dl = DownloadNovel(<span class="string">'https://book.qidian.com/info/1012053141#Catalog'</span>)</span><br><span class="line">    dl.get_download_chapter_url()</span><br><span class="line">    print(<span class="string">'开始下载'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dl.chapterNames)):</span><br><span class="line">        dl.write(dl.chapterNames[i], <span class="string">'无限火力大暴走.txt'</span>, dl.get_contents(dl.chapterUrls[i]))</span><br><span class="line">        sys.stdout.write(<span class="string">"  已下载:%.3f%%"</span> %  float(i/len(dl.chapterNames)) + <span class="string">'\r'</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">    print(<span class="string">'下载完成'</span>)</span><br></pre></td></tr></table></figure><p><strong>2、效果</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-0cec4f9d23b8a56c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.38.46.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-22d26d9c5cff0d9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-07-07 上午9.47.04.png"></p><p>源码<a href="https://github.com/sunnyShining/python-spider/tree/master/downloadNovel" target="_blank" rel="noopener">链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/daa4ffb4a5af&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h2 id=&quot;一、各章小说链接爬取&quot;&gt;&lt;a href=&quot;#一、各章小说链接爬取&quot; class=&quot;headerlink&quot; title=&quot;一、各章小说链接爬取&quot;&gt;&lt;/a&gt;一、各章小说链接爬取&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、章节URL：&lt;a href=&quot;https://book.qidian.com/info/1012053141#Catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://book.qidian.com/info/1012053141#Catalog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="python" scheme="https://sunnyShining.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>react内联样式使用webpack将px转rem</title>
    <link href="https://sunnyShining.github.io/2018/pxToRem/"/>
    <id>https://sunnyShining.github.io/2018/pxToRem/</id>
    <published>2018-04-24T14:34:51.000Z</published>
    <updated>2019-06-29T09:04:59.605Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/83bb5e97bdf3" target="_blank" rel="noopener">简书</a>搬迁</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发react项目时，很多时候我们把style写在css、less、scss里，经过像postcss这样的配置处理，但有没有这样一种需求呢，像有些样式我们直接写在xml标签上style里，然后也能进行处理，如px2rem能将px转rem，是否在style上写也能实现。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们在webpack，/.(js|jsx)?$/这样babel-loader之前（webpack从右往左）加一个loader把需要转变的px进行替换，不就好了，先找找有没有这样的loader，我找了下没找到，只能自己写一个了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数</span></span><br><span class="line"><span class="keyword">const</span> defaultopts = &#123;</span><br><span class="line">    remUnit: <span class="number">100</span>, <span class="comment">// rem unit value (default: 100)</span></span><br><span class="line">    remFixed: <span class="number">2</span>, <span class="comment">// rem value precision (default: 2)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取webpack配置好的参数</span></span><br><span class="line"><span class="keyword">const</span> opts = loaderUtils.getOptions(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 将参数组合</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultopts, opts);</span><br><span class="line"><span class="keyword">const</span> ZPXRegExp = <span class="regexp">/\b(\d+(\.\d+)?)SUPX\b/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pxGlobalRegExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(ZPXRegExp.source, <span class="string">'g'</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cacheable) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先test下有没有符合的如果有再进行替换</span></span><br><span class="line">    <span class="keyword">if</span> (pxGlobalRegExp.test(source)) &#123;</span><br><span class="line">        <span class="keyword">return</span> source.replace(pxGlobalRegExp, ($<span class="number">0</span>, $<span class="number">1</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> val = $<span class="number">1</span> / config.remUnit;</span><br><span class="line">            <span class="comment">// 精确到几位</span></span><br><span class="line">            val = <span class="built_in">parseFloat</span>(val.toFixed(config.remFixed));</span><br><span class="line">            <span class="keyword">return</span> val === <span class="number">0</span> ? val : val + <span class="string">'rem'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: path.join(rootPath, &apos;loaders/jsxPx2RemLoader&apos;),</span><br><span class="line">    options: &#123;</span><br><span class="line">        remUnit: 100,</span><br><span class="line">        remFixed: 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p><a href="https://github.com/sunnyShining/jsxStyleLoader/blob/master/tools/loaders/jsxPx2RemLoader/index.js" target="_blank" rel="noopener">https://github.com/sunnyShining/jsxStyleLoader/blob/master/tools/loaders/jsxPx2RemLoader/index.js</a></p><h2 id="赞赏"><a href="#赞赏" class="headerlink" title="赞赏"></a>赞赏</h2><p>如果你觉得我写的对你有帮助，请给我点赞助，不胜感激</p><p><img src="https://upload-images.jianshu.io/upload_images/4605151-54db300e5da7f210.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WechatIMG42.jpg"><br><img src="https://upload-images.jianshu.io/upload_images/4605151-81f69250028678af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WechatIMG43.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/83bb5e97bdf3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在开发react项目时，很多时候我们把style写在css、less、scss里，经过像postcss这样的配置处理，但有没有这样一种需求呢，像有些样式我们直接写在xml标签上style里，然后也能进行处理，如px2rem能将px转rem，是否在style上写也能实现。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="webpack" scheme="https://sunnyShining.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>解决vue init webpack project新建项目权限问题</title>
    <link href="https://sunnyShining.github.io/2018/vueInitQuestion/"/>
    <id>https://sunnyShining.github.io/2018/vueInitQuestion/</id>
    <published>2018-01-26T13:23:32.000Z</published>
    <updated>2019-06-29T09:04:59.610Z</updated>
    
    <content type="html"><![CDATA[<p>从我<a href="https://www.jianshu.com/p/b1e9f081b32f" target="_blank" rel="noopener">简书</a>搬迁</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>最近开发项目时，同事学习vue项目时自己用官网命令vue init webpack project新建项目时出现</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/lib/node_modules/vue-cli/node_modules/rimraf/rimraf.js:313</span><br><span class="line">        throw er</span><br><span class="line">        ^</span><br><span class="line"></span><br><span class="line">Error: EACCES: permission denied, unlink <span class="string">'/Users/xxx/.vue-templates/webpack/.gitignore'</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>报错原因很明显，文件权限不够，可以在/usr/local/lib/node_modules/vue-cli/bin/ 找到vue-init这个文件，用编辑器打开发现如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Download a generate from a template repo.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; template</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadAndGenerate</span> (<span class="params">template</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(<span class="string">'downloading template'</span>)</span><br><span class="line">    spinner.start()</span><br><span class="line">    <span class="comment">// Remove if local template exists</span></span><br><span class="line">    <span class="keyword">if</span> (exists(tmp)) rm(tmp)</span><br><span class="line">   download(template, tmp, &#123; clone &#125;, err =&gt; &#123;</span><br><span class="line">      spinner.stop()</span><br><span class="line">      <span class="keyword">if</span> (err) logger.fatal(<span class="string">'Failed to download repo '</span> + template + <span class="string">': '</span> + err.message.trim())</span><br><span class="line">    generate(name, tmp, to, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) logger.fatal(err)</span><br><span class="line">        <span class="built_in">console</span>.log()</span><br><span class="line">        logger.success(<span class="string">'Generated "%s".'</span>, name)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if (exists(tmp)) rm(tmp)这句代码便是报错原因所在，这句表示删除/Users/xxx/.vue-templates/webpack这个文件夹，然而的权限不够，导致删除失败，从而抛出错误</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>一、修改文件夹权限</p><p>1、原始文件夹权限（这个权限下正常运行）</p><p><img src="http://upload-images.jianshu.io/upload_images/4605151-3fb96bb3101a98d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p>2、更改文件夹权限</p><p><img src="http://upload-images.jianshu.io/upload_images/4605151-ba0666add9845a3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><p>3、结果报出如下错误</p><p><img src="http://upload-images.jianshu.io/upload_images/4605151-5c9596f7d43a50b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><p>4、改回权限即可解决错误</p><blockquote><p>tips: 一定要将权限应用到包含的项目</p></blockquote><p>二、用sudo命令运行即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vue init webpack project</span><br></pre></td></tr></table></figure></p><p>新建项目成功后，将新建的文件权限改下，否则无法开发项目</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我&lt;a href=&quot;https://www.jianshu.com/p/b1e9f081b32f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;搬迁&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近开发项目时，同事学习vue项目时自己用官网命令vue init webpack project新建项目时出现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/lib/node_modules/vue-cli/node_modules/rimraf/rimraf.js:313&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        throw er&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error: EACCES: permission denied, unlink &lt;span class=&quot;string&quot;&gt;&#39;/Users/xxx/.vue-templates/webpack/.gitignore&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="https://sunnyShining.github.io/categories/programming/"/>
    
    
      <category term="vue" scheme="https://sunnyShining.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
