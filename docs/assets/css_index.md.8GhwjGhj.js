import{_ as s,c as i,o as a,R as t}from"./chunks/framework.YS-5hJ7A.js";const n="/docs/assets/box-sizing.7_JvxdbO.png",y=JSON.parse('{"title":"","description":"","frontmatter":{"0":"t","1":"i","2":"t","3":"l","4":"e","5":" ","6":"基","7":"础"},"headers":[],"relativePath":"css/index.md","filePath":"css/index.md"}'),e={name:"css/index.md"},p=t(`<h2 id="_1、css有哪几种方法隐藏元素-它们之前有哪些区别" tabindex="-1">1、css有哪几种方法隐藏元素，它们之前有哪些区别 <a class="header-anchor" href="#_1、css有哪几种方法隐藏元素-它们之前有哪些区别" aria-label="Permalink to &quot;1、css有哪几种方法隐藏元素，它们之前有哪些区别&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  visibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  opacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><table><thead><tr><th></th><th>是否占据空间</th><th>是否导致浏览器重排重绘</th><th>能否触发点击事件</th></tr></thead><tbody><tr><td>display: none</td><td>不占空间</td><td>会导致浏览器重排和重绘</td><td>不会触发其点击事件</td></tr><tr><td>visibility: hidden</td><td>占空间</td><td>不会导致浏览器重排和重绘</td><td>不会触发其点击事件</td></tr><tr><td>opacity: 0</td><td>占空间</td><td>不会导致浏览器重排和重绘</td><td>会触发其点击事件</td></tr><tr><td>height、width属性为0</td><td>不占空间</td><td>可能会导致浏览器重排和重绘</td><td>设置为0后不会触发其点击事件</td></tr></tbody></table><h2 id="_2、对css盒模型的理解" tabindex="-1">2、对CSS盒模型的理解 <a class="header-anchor" href="#_2、对css盒模型的理解" aria-label="Permalink to &quot;2、对CSS盒模型的理解&quot;">​</a></h2><p>CSS 有两种盒模型：标准盒模型和IE盒模型。</p><p>标准盒模型：元素的宽度和高度只包括内容（content），不包括内边距（padding）、边框（border）和外边距（margin）。 IE盒模型：元素的宽度和高度包括内容（content）、内边距（padding）和边框（border），但不包括外边距（margin）。</p><p><img src="`+n+`" alt="盒模型"></p><h2 id="_3、说一下-box-sizing" tabindex="-1">3、说一下 box-sizing？ <a class="header-anchor" href="#_3、说一下-box-sizing" aria-label="Permalink to &quot;3、说一下 box-sizing？&quot;">​</a></h2><p><code>box-sizing</code> 主要分为 <code>border-box</code> 和 <code>content-box</code></p><p>拿 width 举例：</p><p><code>content-box： width = content + padding + border</code></p><p><code>border-box： width = content</code></p><p>为了方便样式计算，一般采用 <code>border-box</code></p><h2 id="_4、position-fixed-一定是相对于浏览器窗口进行定位吗" tabindex="-1">4、position: fixed 一定是相对于浏览器窗口进行定位吗？ <a class="header-anchor" href="#_4、position-fixed-一定是相对于浏览器窗口进行定位吗" aria-label="Permalink to &quot;4、position: fixed 一定是相对于浏览器窗口进行定位吗？&quot;">​</a></h2><p>不一定。</p><p>position:fixed;的元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置，元素的位置在屏幕滚动时不会改变。fixed 属性会创建新的层叠上下文。</p><p>当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。</p><h2 id="_5、怎么让chrome支持小于12px-的文字" tabindex="-1">5、怎么让Chrome支持小于12px 的文字？ <a class="header-anchor" href="#_5、怎么让chrome支持小于12px-的文字" aria-label="Permalink to &quot;5、怎么让Chrome支持小于12px 的文字？&quot;">​</a></h2><p>在默认情况下，Chrome 浏览器的最小字体大小限制为 12px，因此无法直接设置小于 12px 的文字大小。然而，可以通过以下方法绕过这个限制：</p><p>使用缩放比例：可以使用 CSS 的 transform 属性来缩放文本元素以达到小于 12px 的效果。例如，使用<code>transform: scale(0.8)</code>将文本缩放为 80% 的原始大小。请注意，这可能会导致文本外观变得模糊或失真。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.small-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 zoom：将容器或文本元素的 zoom 属性设置为小于 1 的值，例如 zoom: 0.8;。这会缩小文本元素及其容器，使得文本看起来更小。请注意，zoom 是非标准的 CSS 属性，不一定在所有浏览器中都有效。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.small-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  zoom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 -webkit-text-size-adjust：将容器或文本元素的 -webkit-text-size-adjust 属性设置为 &quot;none&quot; 或 &quot;auto&quot; 可以控制 Chrome 浏览器对文本大小的调整行为。通过将其设置为 &quot;none&quot;，可以禁用 Chrome 浏览器的最小字体大小限制。请注意，-webkit-text-size-adjust 是针对 WebKit 内核（包括 Chrome 和 Safari）的私有属性。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.small-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-text-size-adjust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用图片替代：如果需要应用较小的文字大小，并且无法使用缩放，可以将文本转换为图像，并将其作为背景图像或内联图像插入到元素中。这样可以绕过浏览器的最小字体大小限制。但要注意，这将增加页面加载时间并且不利于可访问性和响应式设计。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;small-text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/small_text_image.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Small Text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_6、object-fit-用法" tabindex="-1">6、object-fit 用法 <a class="header-anchor" href="#_6、object-fit-用法" aria-label="Permalink to &quot;6、object-fit 用法&quot;">​</a></h3><p>object-fit CSS 属性指定可替换元素（例如：<code>&lt;img&gt;</code> 或 <code>&lt;video&gt;</code>）的内容应该如何适应到其使用高度和宽度确定的框。</p><p>你可以通过使用 object-position 属性来切换被替换元素的内容对象在元素框内的对齐方式。</p><p>语法</p><p><code>object-fit: contain; object-fit: cover; object-fit: fill; object-fit: none; object-fit: scale-down;</code></p><p>object-fit 属性由下列的值中的单独一个关键字来指定。</p><p>contain</p><p>被替换的内容将被缩放，以在填充元素的内容框时保持其宽高比。整个对象在填充盒子的同时保留其长宽比，因此如果宽高比与框的宽高比不匹配，该对象将被添加“黑边”。</p><p>cover</p><p>被替换的内容在保持其宽高比的同时填充元素的整个内容框。如果对象的宽高比与内容框不相匹配，该对象将被剪裁以适应内容框。</p><p>fill</p><p>被替换的内容正好填充元素的内容框。整个对象将完全填充此框。如果对象的宽高比与内容框不相匹配，那么该对象将被拉伸以适应内容框。</p><p>none</p><p>被替换的内容将保持其原有的尺寸。</p><p>scale-down</p><p>内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。</p>`,43),h=[p];function l(d,k,o,r,c,E){return a(),i("div",null,h)}const b=s(e,[["render",l]]);export{y as __pageData,b as default};
